
"use client";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { FloatingDock } from "@/components/floating-dock";
import { IconHome, IconAlphabetLatin, IconAlphabetGreek } from "@tabler/icons-react";
import React, { useEffect, useState } from "react";
import { usePathname } from "next/navigation";


const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({ children }: { children: React.ReactNode }) {
  const [darkMode, setDarkMode] = useState(false);
  const pathname = usePathname();

  // Sync theme on mount and on route change
  useEffect(() => {
    const storedTheme = typeof window !== "undefined" ? localStorage.getItem("theme-mode") : null;
    console.log(storedTheme)
    if (storedTheme === "dark") {
      setDarkMode(true);
      document.documentElement.classList.add("dark");
    } else {
      setDarkMode(false);
      document.documentElement.classList.remove("dark");
    }
  }, [pathname]);

  // When darkMode changes, update localStorage and html class
  useEffect(() => {
    if (typeof window === "undefined") return;
    localStorage.setItem("theme-mode", darkMode ? "dark" : "light");
    if (darkMode) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }
  }, [darkMode]);

  return (
    <html lang="en">
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
      >
        <FloatingDock
          items={[ 
            { title: "Home", icon: <IconHome className="w-6 h-6" />, href: "/" },
            { title: "Hiragana", icon: <IconAlphabetLatin className="w-6 h-6" />, href: "/hiragana" },
            { title: "Katakana", icon: <IconAlphabetGreek className="w-6 h-6" />, href: "/katakana" },
          ]}
          desktopClassName="fixed left-1/2 -translate-x-1/2 bottom-6 z-50"
          mobileClassName="fixed right-4 bottom-4 z-50"
        />
        {children}
      </body>
    </html>
  );
}
